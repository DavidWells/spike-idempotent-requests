service: idempotent-requests-demo

frameworkVersion: '3'

plugins:
  - serverless-manifest-plugin

provider:
  name: aws
  stage: ${opt:stage, 'prod'}
  runtime: nodejs22.x
  region: us-west-1
  logRetentionInDays: 14
  environment:
    IDEMPOTENCY_TABLE: ${self:service}-${sls:stage}-idempotency
    LOG_LEVEL: ${opt:logLevel, 'info'}
    NODE_OPTIONS: --enable-source-maps
    CACHE_TIME_IN_SECONDS: 3600
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: !GetAtt IdempotencyTable.Arn

functions:
  idempotent:
    handler: src/handlers/idempotent.handler
    events:
      - http:
          path: /api/idempotent
          method: post
          cors:
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
              - Idempotency-Key
              - idempotency-key
              - ETag
              - Cache-Control
              - Vary
  middy:
    handler: src/handlers/middy.handler
    events:
      - http:
          path: /api/middy
          method: post
          cors:
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
              - Idempotency-Key
              - idempotency-key
              - ETag
              - Cache-Control
              - Vary
              
resources:
  Resources:
    IdempotencyTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.IDEMPOTENCY_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: expiration
          Enabled: true
    # Shut Cors all the way up
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    ServerErrorGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '502'